import streamlit as st # Streamlit 라이브러리를 불러와서 웹 앱을 만들 준비를 해요!

# 🎀 첫 번째! MBTI별 직업 데이터 준비하기 (우리 앱의 핵심 데이터에요!)
# 이 데이터는 나중에 사용자가 MBTI를 선택하면 해당하는 직업들을 보여줄 때 쓰인답니다!
# 각 MBTI 유형 옆에 있는 직업 리스트는 자유롭게 수정하거나 추가할 수 있어요! 😊
MBTI_JOB_DATA = {
    "ISTJ": ["공무원", "회계사", "데이터 분석가", "경찰관", "군인"],
    "ISFJ": ["간호사", "초등학교 교사", "사서", "사회 복지사", "보육교사"],
    "INFJ": ["상담사", "심리학자", "작가", "대학교수", "예술가"],
    "INTJ": ["과학자", "IT 개발자", "전략 기획자", "건축가", "컨설턴트"],
    "ISTP": ["엔지니어", "정비사", "스포츠 선수", "기술자", "경찰/소방관"],
    "ISFP": ["미술가", "음악가", "디자이너", "동물 조련사", "요리사"],
    "INFP": ["시인", "예술가", "언어 치료사", "작가", "교육자"],
    "INTP": ["연구원", "프로그래머", "철학자", "발명가", "과학자"],
    "ESTP": ["영업원", "경영 컨설턴트", "파일럿", "경찰관", "사업가"],
    "ESFP": ["연예인", "이벤트 플래너", "유치원 교사", "가이드", "강사"],
    "ENFP": ["크리에이터", "마케터", "강사", "상담사", "컨설턴트"],
    "ENTP": ["창업가", "변호사", "발명가", "칼럼니스트", "정치인"],
    "ESTJ": ["경영자", "관리자", "회계사", "군인", "은행원"],
    "ESFJ": ["영업 관리", "서비스업 종사자", "유치원 교사", "간호사", "사회복지사"],
    "ENFJ": ["리더", "강사", "인사 담당자", "정치인", "변호사"],
    "ENTJ": ["CEO", "변호사", "경영 컨설턴트", "대학교수", "외교관"]
}

# 🌟 드디어! 메인 함수 정의하기 (우리 웹 앱의 모든 것이 여기서 움직여요!)
def main():
    # 📝 웹 페이지 기본 설정하기
    # st.set_page_config는 웹 앱의 제목, 아이콘, 레이아웃 등을 설정할 수 있어요.
    st.set_page_config(
        page_title="💖 나에게 딱 맞는 MBTI별 직업 추천! 💖", # 브라우저 탭에 나타나는 제목이에요.
        page_icon="✨", # 브라우저 탭에 나타나는 아이콘이에요.
        layout="centered" # 앱 콘텐츠를 페이지 중앙에 배치해서 더 깔끔하게 보여준답니다!
    )

    # 🌈 앱의 제목과 소개글 부분이에요! (사용자들이 가장 먼저 보게 될 부분이죠!)
    st.title("🧐 MBTI별 직업 추천 서비스 🚀")
    st.write("안녕! 나의 MBTI 유형에 딱 맞는 ✨환상의 직업들✨을 함께 찾아볼까요? 커리어 탐색에 작은 도움이 될 거예요! 😊")

    # 👀 시각적인 구분선을 넣어서 각 섹션을 예쁘게 나누어줘요!
    st.markdown("---")

    # 🖼️ 이미지 추가하기 (앱을 더 귀엽게 만들어 줄 그림이에요!)
    # Unsplash에서 가져온 직업 관련 이미지에요. URL을 다른 이미지로 바꿔도 좋아요!
    st.image(
        "https://images.unsplash.com/photo-1517457375823-379e491c4984?q=80&w=600&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
        width=300, # 이미지 크기를 적절하게 조절해서 너무 크지 않게!
        caption="💖 당신의 숨겨진 잠재력을 찾아보세요! 💖" # 이미지 아래에 나타나는 설명이에요.
    )
    st.markdown("---") # 또 하나의 구분선!

    # 🙋‍♀️ 사용자 입력 받기: MBTI 선택 드롭다운 박스
    # st.selectbox를 사용하면 사용자가 목록 중에서 하나를 선택할 수 있어요.
    # options에는 빈 문자열("")을 맨 앞에 넣어서, 사용자가 아무것도 선택하지 않은 초기 상태를 만들어요.
    # sorted()를 사용해서 MBTI 유형들이 보기 좋게 정렬되도록 했어요!
    mbti_type = st.selectbox(
        "✨ **당신의 MBTI는 무엇인가요? 아래에서 골라주세요!** 👇",
        options=[""] + sorted(list(MBTI_JOB_DATA.keys())),
        index=0 # 첫 번째 옵션(빈 문자열)이 기본으로 보이게 설정!
    )

    # 👆 버튼 만들기: '내 직업 추천받기!' 버튼을 누르면 직업을 추천해줘요!
    if st.button("🚀 내 직업 추천받기!"):
        if mbti_type: # 만약 사용자가 MBTI 유형을 선택했다면?
            # 선택된 MBTI 유형에 맞는 직업 리스트를 MBTI_JOB_DATA에서 찾아와요.
            # .get()을 사용하면 만약 데이터에 없는 MBTI가 선택되더라도 오류 대신 빈 리스트를 반환해요.
            recommended_jobs = MBTI_JOB_DATA.get(mbti_type, [])

            st.markdown("---") # 결과 섹션 시작!
            st.subheader(f"✅ **{mbti_type}** 유형에게 추천하는 직업이에요! 🌟")
            st.write("아래 직업들을 통해 당신의 재능을 마음껏 꽃피울 수 있기를 응원합니다! 🌷 정말 기대되죠?")

            if recommended_jobs: # 추천 직업이 있다면 목록으로 보여줘요.
                # 리스트 형식으로 깔끔하게 출력하기 위해 st.markdown을 사용했어요.
                for job in recommended_jobs:
                    st.markdown(f"- **{job}**") # -로 목록을 만들고 **로 굵게 표시!
            else: # 만약 해당 MBTI에 대한 추천 직업 데이터가 없다면?
                st.info("이런! 아직 **[{}](https://www.google.com/search?q={}%EB%B3%84+%EC%A7%81%EC%97%85)".format(mbti_type,mbti_type) + "** 유형에 대한 직업 추천 데이터가 충분치 않네요. 🥲 얼른 업데이트해서 찾아올게요! 조금만 기다려주세요! ㅠㅠ")

            st.markdown("---") # 결과 섹션 마무리!
            # 주의사항이나 조언을 넣어주는 것도 친절한 앱이 되는 방법이에요!
            st.info("💡 이 추천은 일반적인 경향성을 바탕으로 해요. 개인의 성향과 경험에 따라 가장 잘 맞는 직업은 다를 수 있답니다! 여러 경험을 통해 나에게 딱 맞는 길을 찾아나가는 것이 정말 중요해요! 😊")
        else: # 만약 사용자가 MBTI 유형을 선택하지 않고 버튼을 눌렀다면?
            st.warning("앗! MBTI 유형을 먼저 선택해주셔야 제가 추천해 드릴 수 있어요! 😲 드롭다운에서 골라주세요~!")

# 🚀 앱 실행 부분 (이 코드가 있어야 Streamlit 앱이 실행돼요!)
# 이 조건문은 이 파이썬 파일이 직접 실행될 때만 main() 함수를 호출하라는 의미예요.
if __name__ == "__main__":
    main() # 위에 정의한 main 함수를 호출하여 웹 앱을 시작합니다!
